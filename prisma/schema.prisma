datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Account {
  id                        String @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String  @map("provider_account_id")
  refresh_token             String?
  access_token              String?
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? @db.Text
  session_state             String?
  oauth_token_secret        String?
  oauth_token               String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id                  String    @id @default(cuid())
  sessionToken        String    @unique @map("session_token")
  userId              String    @map("user_id")
  expires             DateTime
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime        @default(now()) @map(name: "created_at")
  deleted             Boolean         @default(false)
  accounts            Account[]
  sessions            Session[]
  projects            ProjectUser[]
  activity            Change[]

  @@map(name: "users")
}

model VerificationToken {
  id              Int       @id @default(autoincrement())
  identifier      String
  token           String    @unique
  expires         DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Project {
  id        Int             @id @default(autoincrement())
  title     String
  createdAt DateTime        @default(now()) @map(name: "created_at")        
  users     ProjectUser[]
  published Boolean         @default(false)
  deleted   Boolean         @default(false)
  sections  Section[]
  tags      Tag[]
  changes   Change[]

  @@map(name: "projects")
}

model ProjectUser {
  project   Project         @relation(fields: [projectId], references: [id])
  projectId Int
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  role      Role            @relation(fields: [roleId], references: [id])
  roleId    Int

  @@id([projectId, userId])
  @@map("projectUsers")
}

model Role {
  id      Int               @id @default(autoincrement())
  projectUsers ProjectUser[]
  name    String            @unique
  @@map(name: "roles")
}

model Change {
  id      Int               @id @default(autoincrement())
  project Project           @relation(fields: [projectId], references: [id])
  projectId Int
  user    User              @relation(fields: [userId], references: [id])
  userId  String
  madeAt  DateTime          @default(now()) @map(name: "made_at")
  description String
  @@map(name: "changes")
}

model Tag {
  id Int            @id @default(autoincrement())
  name String       @unique
  projects  Project[]
  @@map(name: "tags")
}

model Section {
  id        Int             @id @default(autoincrement())
  projects  Project         @relation(fields: [projectId], references: [id])
  projectId Int
  sectionType SectionType   @relation(fields: [sectionTypeId], references: [id])
  sectionTypeId Int
  name      String          
  createdAt DateTime        @default(now()) @map(name: "created_at")
  updatedAt DateTime        @updatedAt  @map(name: "updated_at")
  description String?
  content   Content[]
  order     Int             // For determining the order of sections from UI POV
  hidden    Boolean         @default(false)
  deleted   Boolean         @default(false)
  @@map(name: "sections")
}

model SectionType {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  sections  Section[]
  @@map(name: "sectionTypes")
}

model Content {
  id            Int           @id @default(autoincrement())
  contentType   ContentType   @relation(fields: [contentTypeId], references: [id])
  contentTypeId Int
  details       String?
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  section       Section       @relation(fields: [sectionId], references: [id])
  sectionId     Int
  hidden        Boolean       @default(false)
  deleted       Boolean       @default(false)
  @@map(name: "content")
}

model ContentType {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  content   Content[]
  @@map(name: "contentTypes")
}